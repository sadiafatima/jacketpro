<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
			  xmlns:s="library://ns.adobe.com/flex/spark"
			  xmlns:mx="library://ns.adobe.com/flex/halo"
			  creationComplete="init()">
			  
	<fx:Metadata>
        [Event(name="colourChange", type="bms.jacketpro.event.SelectionChangeEvent")]
    </fx:Metadata>
	<fx:Declarations>
		<s:GlowFilter id="glow" blurX="16" blurY="16" inner="true" color="#FFFFFF" quality="2" strength="1"/>
	</fx:Declarations>
			  
	<fx:Script>
		<![CDATA[
		import bms.jacketpro.event.SelectionChangeEvent
		import flash.events.Event;
		import flash.events.MouseEvent;
		import flash.geom.Point;
		import mx.events.FlexEvent;
        import mx.controls.ToolTip;
        import mx.core.IUIComponent;
		import mx.managers.ToolTipManager;
		import spark.components.Image;
		import spark.components.NavigatorContent;
		
        public var myTip:ToolTip;

		private var jacketParts:JacketParts;
		private var selectedPart:String;
		private var currentViewingAngle:String;
		private var partColours:Array;
		
		public function init():void
		{
			jacketParts = new JacketParts();
			
			selectedPart = JacketParts.BASE;
			updateViewingAngle(true);

			partColours = new Array();
			partColours[JacketParts.BASE] = JacketColour.BROWN;
			partColours[JacketParts.BORDER] = JacketColour.BROWN;
			partColours[JacketParts.SLEEVES] = JacketColour.BROWN;
			
			refreshAllParts();
			
			parent.addEventListener(SelectionChangeEvent.COLOUR_CHANGE, colourChanged);
			parent.addEventListener(SelectionChangeEvent.PART_CHANGE, partChanged);
		}
		
		public function partChanged(event:SelectionChangeEvent):void
		{
			//trace("updated Part to : " + event.part);
			selectedPart = event.part;
		}
		
		public function colourChanged(event:SelectionChangeEvent):void
		{
			trace("updating colour of " + selectedPart + " to " + event.colour);
			partColours[selectedPart] = event.colour;
			this[selectedPart+"Img"].source = jacketParts.getImage(currentViewingAngle, selectedPart, partColours[selectedPart]);
		}
		
		public function viewingAngleChanged():void
		{
			trace("toggleViewAngle");
			updateViewingAngle(!isFront());
			refreshAllParts();
		}
		
		private function updateViewingAngle(front:Boolean):void
		{
			if (front)currentViewingAngle = ViewingAngle.FRONT;
			else currentViewingAngle = ViewingAngle.BACK;
			
			baseFrontRegion.visible = front;
			leftborderFrontRegion.visible = front;
			rightborderFrontRegion.visible = front;
			leftsleeveFrontRegion.visible = front;
			rightsleeveFrontRegion.visible = front;
			baseBackRegion.visible = !front;
			borderBackRegion.visible = !front;
			leftsleeveBackRegion.visible = !front;
			rightsleeveBackRegion.visible = !front;
		}
		
		private function refreshAllParts():void
		{
			for each (var part:String in [JacketParts.BASE, JacketParts.BORDER, JacketParts.SLEEVES])
			{
				this[part + "Img"].source = jacketParts.getImage(currentViewingAngle, part, partColours[part]);
			}
		}
		
		public function partHovered(part:String, event:MouseEvent):void
		{			
			trace("part hovered " + part);
			this[part + "Img"].filters = [glow];
			myTip = ToolTipManager.createToolTip(part, event.stageX, event.stageY-20, null, IUIComponent(event.currentTarget)) as ToolTip;
			
			myTip.setStyle("fontFamily", "Arial");
			myTip.setStyle("backgroundColor", 0x222222);
			myTip.setStyle("color", 0xFFFFFF);
            myTip.setStyle("fontSize", 12);
            myTip.width = (part.length * 6) + 20;
            myTip.height = 28;
        }
		
		private function moveToolTip(part:String, event:MouseEvent):void 
		{
			if (myTip != null)
			{
				stopHover(null, event);
				partHovered(part, event);
			}
		}

        private function stopHover(part:String, event:MouseEvent):void 
		{
			if (part != null) 
				this[part + "Img"].filters = [];
				
            if (myTip != null)
			{
				ToolTipManager.destroyToolTip(myTip);
				myTip = null;
			}
		}
		
		public function updateSelectedPart(part:String):void
		{
			selectedPart = part;
			var ev:SelectionChangeEvent = new SelectionChangeEvent(SelectionChangeEvent.PART_CHANGE);
			ev.part = part;
			trace("dispatching part change from preview panel: " + ev.part);
            dispatchEvent(ev);
		}
		
		private function isFront():Boolean
		{
			return (currentViewingAngle == ViewingAngle.FRONT);
		}
		
		
		]]>
	</fx:Script>
	
	<s:Image id="baseImg" clearOnLoad="false" width="472" height="548" fillMode="scale" scaleMode="letterbox" />
	<s:Image id="secondaryImg" clearOnLoad="false" width="472" height="548" fillMode="scale" scaleMode="letterbox" />
	<s:Image id="borderImg" clearOnLoad="false" width="472" height="548" fillMode="scale" scaleMode="letterbox" />		

	<s:Image id="baseFrontRegion" x="120" y="20" width="250" height="410" fillMode="repeat"
		source="@Embed('/../assets/transparent.png')"
		mouseOver="partHovered('base', event);" mouseOut="stopHover('base', event)" 
		mouseMove="moveToolTip('base', event)" click="updateSelectedPart('base')" />
			
	<s:Image id="leftsleeveFrontRegion" x="30" y="55" width="90" height="410" fillMode="repeat" 
		source="@Embed('/../assets/transparent.png')"
		mouseOver="partHovered('secondary', event);" mouseOut="stopHover('secondary', event)" 
		mouseMove="moveToolTip('secondary', event)" click="updateSelectedPart('secondary')"/>		
	
	<s:Image id="rightsleeveFrontRegion" x="370" y="55" width="70" height="410" fillMode="repeat" 
		source="@Embed('/../assets/transparent.png')"
		mouseOver="partHovered('secondary', event);" mouseOut="stopHover('secondary', event)" 
		mouseMove="moveToolTip('secondary', event)" click="updateSelectedPart('secondary')"/>
		
	<s:Image id="leftborderFrontRegion" x="100" y="375" width="35" height="50" fillMode="repeat" 
		source="@Embed('/../assets/transparent.png')"
		mouseOver="partHovered('border', event);" mouseOut="stopHover('border', event)" 
		mouseMove="moveToolTip('border', event)" click="updateSelectedPart('border')"/>
		
	<s:Image id="rightborderFrontRegion" x="330" y="380" width="35" height="50" fillMode="repeat"
		source="@Embed('/../assets/transparent.png')"
		mouseOver="partHovered('border', event);" mouseOut="stopHover('border', event)" 
		mouseMove="moveToolTip('border', event)" click="updateSelectedPart('border')"/>
	
	<s:Image id="baseBackRegion" x="80" y="20" width="280" height="450" fillMode="repeat"
		source="@Embed('/../assets/transparent.png')"
		mouseOver="partHovered('base', event);" mouseOut="stopHover('base', event)" 
		mouseMove="moveToolTip('base', event)" click="updateSelectedPart('base')" />
			
	<s:Image id="leftsleeveBackRegion" x="10" y="75" width="70" height="410" fillMode="repeat" 
		source="@Embed('/../assets/transparent.png')"
		mouseOver="partHovered('secondary', event);" mouseOut="stopHover('secondary', event)" 
		mouseMove="moveToolTip('secondary', event)" click="updateSelectedPart('secondary')"/>		
	
	<s:Image id="rightsleeveBackRegion" x="360" y="75" width="80" height="410" fillMode="repeat" 
		source="@Embed('/../assets/transparent.png')"
		mouseOver="partHovered('secondary', event);" mouseOut="stopHover('secondary', event)" 
		mouseMove="moveToolTip('secondary', event)" click="updateSelectedPart('secondary')"/>
		
	<s:Image id="borderBackRegion" x="100" y="430" width="240" height="40" fillMode="repeat" 
		source="@Embed('/../assets/transparent.png')"
		mouseOver="partHovered('border', event);" mouseOut="stopHover('border', event)" 
		mouseMove="moveToolTip('border', event)" click="updateSelectedPart('border')"/>
		
</s:Group>
